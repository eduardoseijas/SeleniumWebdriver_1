En funciones tengo

 def SEX(self,elemento):
        val = WebDriverWait(self.driver, 5).until(EC.visibility_of_element_located((By.XPATH, elemento)))
        val = self.driver.execute_script("arguments[0].scrollIntoView();", val)
        val = self.driver.find_element(By.XPATH, elemento)
        return val

    def SEI(self,elemento):
        val = WebDriverWait(self.driver, 5).until(EC.visibility_of_element_located((By.ID, elemento)))
        val = self.driver.execute_script("arguments[0].scrollIntoView();", val)
        val = self.driver.find_element(By.ID, elemento)
        return val

    def SECCS(self,elemento):
        val = WebDriverWait(self.driver, 5).until(EC.visibility_of_element_located((By.CSS_SELECTOR, elemento)))
        val = self.driver.execute_script("arguments[0].scrollIntoView();", val)
        val = self.driver.find_element(By.CSS_SELECTOR, elemento)

       ES PARA ACORTAR LAS LINEAS DE LA SIGUIENTE FUNCION:

            def Text_Mixto_Validado(self,tipo, selector, texto, tiempo):
        if (tipo== "xpath"):
            try:
                val = WebDriverWait(self.driver, 5).until(EC.visibility_of_element_located((By.XPATH, selector)))
                val = self.driver.execute_script("arguments[0].scrollIntoView();", val)
                val = self.driver.find_element(By.XPATH, selector)
                val.clear()
                val.send_keys(texto)
                print("Escribiendo en el campo{} el texto -> {} : ".format(selector, texto))
                t = time.sleep(tiempo)
                return t
            except TimeoutException as ex:
                print(ex.msg)
                print("No se encontro, el elemento:" + selector)
        elif(tipo=="id"):
            try:
                val = WebDriverWait(self.driver, 5).until(EC.visibility_of_element_located((By.ID, selector)))
                val = self.driver.execute_script("arguments[0].scrollIntoView();", val)
                val = self.driver.find_element(By.ID, selector)
                val.clear()
                val.send_keys(texto)
                print("Escribiendo en el campo{} el texto -> {} : ".format(selector, texto))
                t = time.sleep(tiempo)
                return t
            except TimeoutException as ex:
                print(ex.msg)
                print("No se encontro, el elemento:" + selector)

        elif (tipo == "css"):
            try:
                val = WebDriverWait(self.driver, 5).until(EC.visibility_of_element_located((By.CSS_SELECTOR, selector)))
                val = self.driver.execute_script("arguments[0].scrollIntoView();", val)
                val = self.driver.find_element(By.CSS_SELECTOR, selector)
                val.clear()
                val.send_keys(texto)
                print("Escribiendo en el campo{} el texto -> {} : ".format(selector, texto))
                t = time.sleep(tiempo)
                return t
            except TimeoutException as ex:
                print(ex.msg)
                print("No se encontro, el elemento:" + selector)


       #Y QUEDE ASI:

           def Text_Mixto_Validado(self,tipo, selector, texto, tiempo):
        if (tipo== "xpath"):
            try:
                val=self.SEX(selector)
                val.clear()
                val.send_keys(texto)
                print("Escribiendo en el campo{} el texto -> {} : ".format(selector, texto))
                t = time.sleep(tiempo)
                return t
            except TimeoutException as ex:
                print(ex.msg)
                print("No se encontro, el elemento:" + selector)
        elif(tipo=="id"):
            try:
                val = self.SEI(selector)
                val.clear()
                val.send_keys(texto)
                print("Escribiendo en el campo{} el texto -> {} : ".format(selector, texto))
                t = time.sleep(tiempo)
                return t
            except TimeoutException as ex:
                print(ex.msg)
                print("No se encontro, el elemento:" + selector)

        elif (tipo == "css"):
            try:
                val=self.SECCS(selector)
                val.clear()
                val.send_keys(texto)
                print("Escribiendo en el campo{} el texto -> {} : ".format(selector, texto))
                t = time.sleep(tiempo)
                return t
            except TimeoutException as ex:
                print(ex.msg)
                print("No se encontro, el elemento:" + selector)

  #LO MISMO PARA LA FUNCION DE CLICK_MIXTO

      def Click_Mixto(self,tipo,selector, tiempo):
        if(tipo=="xpath"):
            try:
                val = WebDriverWait(self.driver, 5).until(EC.visibility_of_element_located((By.XPATH,selector)))
                val = self.driver.execute_script("arguments[0].scrollIntoView();", val)
                val = self.driver.find_element(By.XPATH, selector)
                val.click()
                print("Hacemos click en el campo {}: ".format(selector))
                t = time.sleep(tiempo)
                return t
            except TimeoutException as ex:
                print(ex.msg)
                print("No se encontro, el elemento:" + selector)
        elif (tipo == "id"):
            try:
                val = WebDriverWait(self.driver, 5).until(EC.visibility_of_element_located((By.ID, selector)))
                val = self.driver.execute_script("arguments[0].scrollIntoView();", val)
                val = self.driver.find_element(By.ID, selector)
                val.click()
                print("Hacemos click en el campo {}: ".format(selector))
                t = time.sleep(tiempo)
                return t
            except TimeoutException as ex:
                print(ex.msg)
                print("No se encontro, el elemento:" + selector)
        elif (tipo == "css"):
            try:
                val = WebDriverWait(self.driver, 5).until(EC.visibility_of_element_located((By.CSS_SELECTOR, selector)))
                val = self.driver.execute_script("arguments[0].scrollIntoView();", val)
                val = self.driver.find_element(By.CSS_SELECTOR, selector)
                val.click()
                print("Hacemos click en el campo {}: ".format(selector))
                t = time.sleep(tiempo)
                return t
            except TimeoutException as ex:
                print(ex.msg)
                print("No se encontro, el elemento:" + selector)

  #QUEDA ASI

      def Click_Mixto(self,tipo,selector, tiempo):
        if(tipo=="xpath"):
            try:
                val = self.SEX(selector)
                val.click()
                print("Hacemos click en el campo {}: ".format(selector))
                t = time.sleep(tiempo)
                return t
            except TimeoutException as ex:
                print(ex.msg)
                print("No se encontro, el elemento:" + selector)
        elif (tipo == "id"):
            try:
                val = self.SEI(selector)
                val.click()
                print("Hacemos click en el campo {}: ".format(selector))
                t = time.sleep(tiempo)
                return t
            except TimeoutException as ex:
                print(ex.msg)
                print("No se encontro, el elemento:" + selector)
        elif (tipo == "css"):
            try:
                val = self.SECCS(selector)
                val.click()
                print("Hacemos click en el campo {}: ".format(selector))
                t = time.sleep(tiempo)
                return t
            except TimeoutException as ex:
                print(ex.msg)
                print("No se encontro, el elemento:" + selector)

